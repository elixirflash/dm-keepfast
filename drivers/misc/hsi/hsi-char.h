/* linux/drivers/misc/hsi/hsi-char.h
 *
 * Copyright 2012 Samsung Electronics Co.Ltd
 *      Donggyun, ko <donggyun.ko@samsung.com>
 *
 * This program is free software; you can redistribute  it and/or modify it
 * under  the terms of  the GNU General  Public License as published by the
 * Free Software Foundation;  either version 2 of the  License, or (at your
 * option) any later version.
 *
*/

#ifndef __HSI_CHAR_HEADER__
#define __HSI_CHAR_HEADER__

#define HSI_MAX_CHAR_DEVS       8

/* The begin of the sechsi command */
#define SECHSI_MAGIC_NUM         'h'

enum {
	IOCTL_SEND = 0,
	IOCTL_SET,
	IOCTL_MIPIRD,
	IOCTL_MIPIWR,
	IOCTL_RDREG,
	IOCTL_WRREG,
	IOCTL_BREAK,

	IOCTL_ECHO,
	IOCTL_DEBUG1,
	IOCTL_DEBUG2,
	IOCTL_DEBUG3,
	IOCTL_DEBUG4,

	IOCTL_HSI_INIT,
	IOCTL_HSI_DUMPSFR,
	IOCTL_HSI_SYSSTAT,
	IOCTL_SET_BUSSPEED,

	IOCTL_SEND_ONEDW,
	IOCTL_SEND_SEQDATA,
	IOCTL_SEND_SEQDATAPIO,
	IOCTL_SEND_BUFFER,
	IOCTL_READ_BUFFER,
	IOCTL_SEND_BESTEFF,
	IOCTL_OPEN_CHANNEL,
	IOCTL_RECV_NBYTES,
	IOCTL_RECV_CPEMUL,
	IOCTL_SETFIFOSIZE,
	IOCTL_GET_SYSTEM,
	IOCTL_GET_CHANNEL,
};

#define SECHSI_SEND		_IO(SECHSI_MAGIC_NUM, IOCTL_SEND)
#define SECHSI_SET		_IO(SECHSI_MAGIC_NUM, IOCTL_SET)
#define SECHSI_MIPIRD		_IO(SECHSI_MAGIC_NUM, IOCTL_MIPIRD)
#define SECHSI_MIPIWR		_IO(SECHSI_MAGIC_NUM, IOCTL_MIPIWR)
#define SECHSI_RDREG		_IO(SECHSI_MAGIC_NUM, IOCTL_RDREG)
#define SECHSI_WRREG		_IO(SECHSI_MAGIC_NUM, IOCTL_WRREG)
#define SECHSI_BREAK		_IO(SECHSI_MAGIC_NUM, IOCTL_BREAK)

#define SECHSI_DEBUG1_CMD	_IO(SECHSI_MAGIC_NUM, IOCTL_DEBUG1)
#define SECHSI_DEBUG2_CMD	_IO(SECHSI_MAGIC_NUM, IOCTL_DEBUG2)
#define SECHSI_DEBUG3_CMD	_IO(SECHSI_MAGIC_NUM, IOCTL_DEBUG3)
#define SECHSI_DEBUG4_CMD	_IO(SECHSI_MAGIC_NUM, IOCTL_DEBUG4)

#define SECHSI_HSI_INIT_CMD	_IO(SECHSI_MAGIC_NUM, IOCTL_HSI_INIT)
#define SECHSI_HSI_DUMPSFR_CMD	_IO(SECHSI_MAGIC_NUM, IOCTL_HSI_DUMPSFR)
#define SECHSI_HSI_SYSSTAT_CMD	_IO(SECHSI_MAGIC_NUM, IOCTL_HSI_SYSSTAT)
#define SECHSI_SET_BUSSPEED_CMD	_IO(SECHSI_MAGIC_NUM, IOCTL_SET_BUSSPEED)

#define SECHSI_SEND_ONEDW	_IO(SECHSI_MAGIC_NUM, IOCTL_SEND_ONEDW)
#define SECHSI_SEND_SEQDATA	_IO(SECHSI_MAGIC_NUM, IOCTL_SEND_SEQDATA)
#define SECHSI_SEND_BESTEFF	_IO(SECHSI_MAGIC_NUM, IOCTL_SEND_BESTEFF)
#define SECHSI_SEND_SEQDATAPIO	_IO(SECHSI_MAGIC_NUM, IOCTL_SEND_SEQDATAPIO)
#define SECHSI_SEND_BUFFER	_IO(SECHSI_MAGIC_NUM, IOCTL_SEND_BUFFER)
#define SECHSI_READ_BUFFER	_IO(SECHSI_MAGIC_NUM, IOCTL_READ_BUFFER)
#define SECHSI_OPEN_CHANNEL	_IO(SECHSI_MAGIC_NUM, IOCTL_OPEN_CHANNEL)
#define SECHSI_RECV_NBYTES	_IO(SECHSI_MAGIC_NUM, IOCTL_RECV_NBYTES)
#define SECHSI_RECV_CPEMUL	_IO(SECHSI_MAGIC_NUM, IOCTL_RECV_CPEMUL)

#define SECHSI_SETFIFOSIZE	_IO(SECHSI_MAGIC_NUM, IOCTL_SETFIFOSIZE)

#define SECHSI_GET_SYSTEM	_IO(SECHSI_MAGIC_NUM, IOCTL_GET_SYSTEM)
#define SECHSI_GET_CHANNEL	_IO(SECHSI_MAGIC_NUM, IOCTL_GET_CHANNEL)

#define CMD_CHANNEL_MODE_TX	1
#define CMD_CHANNEL_MODE_RX	2

/* for accessing channel infomation */
enum {
	CHANNEL_RXBUFFER,
	CHANNEL_STATUS,
	CHANNEL_RX_PEND_SIGNAL,
	CHANNEL_TX_PEND_SIGNAL,
};

/* for representaion status of channel */
enum {
	CHANNEL_STAT_RECEIVING = 0x01,
	CHANNEL_STAT_WRITING   = 0x02,
};


struct sechsi_result {
	unsigned int res1;
};

struct test_param {
	unsigned int cmdid;
	int channel; /* channel number, it's only for small-root */
	unsigned int param1;
	unsigned int param2;
	struct sechsi_result res;
};

/* The end of the sechsi command */

#endif
